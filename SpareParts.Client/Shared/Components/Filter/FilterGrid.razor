@typeparam T

@using System.Collections.Immutable;
@using System.Text
@using Humanizer
@using SpareParts.Shared.Models

@inject IGraphQLRequestBuilder graphQLRequestBuilder

<div>
    @if(FilterGridState != null)
    {
        <div>
            @if (FilterGridState.FilterFields != null)
            {
                <ChipsList Chips="FilterGridState.FilterFields.Select(f => new Chip(f.Name, f.IsSelected)).ToList()" Title="Fields" OnToggleChip="HandleToggleField" />
            }
        </div>

        <div>
            @if (FilterGridState.FilterLines != null && FilterGridState.FilterFields != null)
            {
                <EditForm Model="FilterGridState.FilterLines" OnValidSubmit="HandleValidSubmit">
                    <div class="card mt-2">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Filters</h6>
                            @foreach (var filterLine in FilterGridState.FilterLines)
                            {
                                <FilterSelector Fields="FilterGridState.FilterFields.ToList()" Operators="_operators" FilterLine="filterLine"
                                    FilterLineChanged="HandleFilterLineChanged" OnRemoveFilter="HandleRemoveFilter" />
                            }
                            <div class="mt-2">
                                <button type="button" class="btn btn-outline-dark tool-button" @onclick="AddEmptyFilter"><span class="oi oi-plus tool-button-image" title="Add Filter" aria-hidden="true" /><span>Add Filter</span></button>
                                <button type="submit" class="btn btn-outline-dark tool-button"><span class="oi oi-magnifying-glass tool-button-image" title="Search" aria-hidden="true" /><span>Search</span></button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    }
    
    @if (_hasError)
    {
        <div class="alert alert-danger py-1">
            @_errorMessage
        </div>
    }

    @if(_filterResults != null && FilterGridState != null && FilterGridState.FilterFields != null)
    {
        <SimpleDataGrid T="T" DataSource="_filterResults" ColumnList="FilterGridState.FilterFields.Where(f => f.IsSelected).Select(f => f.Name).ToList()" OnRowClick="OnRowClick" />
    }
        
</div>


@code
{
    [Parameter]
    public EventCallback<Dictionary<string, string>> OnRowClick { get; set; }

    [Parameter]
    public string? RootGraphQLField { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<GraphQLRequest, Task<List<T>>>? ServiceCall { get; set; }

    [Parameter]
    public FilterGridState? FilterGridState { get; set; }

    [Parameter]
    public EventCallback<FilterGridState> OnFilterStateChanged { get; set; }


    private List<T>? _filterResults { get; set; }   
    private List<NamedFilterOperator>? _operators;
    private const int MaxFilterLineCount = 5;

    private bool _hasError;
    private string? _errorMessage;

    // TODO PAGING
    private int _totalItemCount;
    private const int PageSize = 10;


    protected override async Task OnInitializedAsync()
    {
        FilterGridState = FilterGridState ?? new FilterGridState();
        await InitializeFilterFields();
        _operators = FilterOperator.NamedFilterOperators().ToList();

        if(HasFilterLines()){
            await Search();
        }
        else
        {
            await AddEmptyFilter();
        }

        _hasError = false;
        _errorMessage = string.Empty;
    }

    private async Task UpdateFilterGridState()
    {
        if (OnFilterStateChanged.HasDelegate)
        {
            await OnFilterStateChanged.InvokeAsync(FilterGridState);
        }
    }

    private async Task InitializeFilterFields()
    {
        if (FilterGridState != null && !FilterGridState.FilterFields.Any())
        {
            FilterGridState = FilterGridState with
            {
                FilterFields = ImmutableList.Create(GetFilterFields())
            };

            await UpdateFilterGridState();   
        }
    }

    private FilterField[] GetFilterFields()
    {
        var props = typeof(T).GetProperties();
        var fields = props.Select(p => new FilterField(p.Name, p.PropertyType, true)).Where(f => f.Name.ToLower() != "id");
        return fields.ToArray();
    }

    private async Task AddEmptyFilter()
    {
        if (FilterGridState != null && FilterGridState.FilterLines != null && FilterGridState.FilterLines.Count <= MaxFilterLineCount - 1
                && FilterGridState.FilterFields != null)
        {
            FilterGridState = FilterGridState with
            {
                FilterLines = FilterGridState.FilterLines.Add(new FilterLine(FilterGridState.FilterFields.First(), FilterOperator.Equal, ""))
            };

            await UpdateFilterGridState();
        }
    }

    private async Task HandleFilterLineChanged(FilterLine filterLine)
    {
        if (FilterGridState != null)
        {
            var filterToUpdate = FilterGridState.FilterLines.FirstOrDefault(f => f.ID == filterLine.ID);
            if (filterToUpdate != null)
            {
                FilterGridState = FilterGridState with
                    {
                        FilterLines = FilterGridState.FilterLines.Replace(filterToUpdate, filterLine)
                    };
            }

            await UpdateFilterGridState();
        }
    }

    private async Task HandleRemoveFilter(FilterLine filterLine)
    {
        if (FilterGridState != null && HasFilterLines())
        {

            var filterLineToRemove = FilterGridState.FilterLines.FirstOrDefault(f => f.ID == filterLine.ID);

            if (filterLineToRemove != null)
            {
                FilterGridState = FilterGridState with
                {
                    FilterLines = FilterGridState.FilterLines.Remove(filterLineToRemove)
                };
            }

            await UpdateFilterGridState();
            await Search();
        }
    }

    private async Task HandleToggleField(Chip chip)
    {
        if(FilterGridState != null && HasFilterFields() && FilterGridState.FilterLines != null && chip != null)
        {
            var isFilterSelected = FilterGridState.FilterLines.FirstOrDefault(f => f.SelectedField.Name == chip.Name) != null;
            if(!isFilterSelected)  // don't toggle chip if the filter is in use
            {
                var itemToToggle = FilterGridState.FilterFields.FirstOrDefault(f => f.Name == chip.Name);

                if (itemToToggle != null)
                {
                    FilterGridState = FilterGridState with
                    {
                        FilterFields = FilterGridState.FilterFields.Replace(itemToToggle, new FilterField(itemToToggle.Name, itemToToggle.Type, !itemToToggle.IsSelected))
                    };
                }

                await UpdateFilterGridState();
                await Search();
            }
        }
    }

    private async Task HandleValidSubmit(EditContext context)
    {
        await Search();
    }

    private async Task Search()
    {
        ClearFilterResults();
        if (FilterGridState != null && HasFilterLines() && HasFilterFields())
        {
            var validator = new FilterLinesValidator();
            var filterFieldsList = FilterGridState.FilterLines.ToList();
            var validationResult = validator.Validate(filterFieldsList);
            if (validationResult.IsValid)
            {
                var graphQLRequest = graphQLRequestBuilder.Build<T>(filterFieldsList, FilterGridState.FilterFields.ToList());

                if(ServiceCall != null)
                {
                    var serviceResult = await ServiceCall.Invoke(graphQLRequest);

                    if (serviceResult != null && serviceResult.Any())
                    {
                        _filterResults = serviceResult;
                        _hasError = false;
                        _errorMessage = string.Empty;
                    }
                    else
                    {
                        _hasError = true;
                        _errorMessage = "No results found";
                    }
                }
            }
            else
            {
                _hasError = true;
                var sb = new StringBuilder();
                for (int i = 0; i < validationResult.Errors.Count; i++)
                {
                    var error = validationResult.Errors[i];
                    sb.AppendLine($"Row {i} is invalid. {error.ErrorMessage}");
                }
                _errorMessage = sb.ToString();
                
                return;
            }            
        }
    }

    private bool HasFilterFields()
    {
        return FilterGridState != null && FilterGridState.FilterFields != null && FilterGridState.FilterFields.Any();
    }

    private bool HasFilterLines()
    {
        return FilterGridState != null && FilterGridState.FilterLines != null && FilterGridState.FilterLines.Any();
    }

    private void ClearFilterResults()
    {
        _filterResults = new List<T>();
    }
}
