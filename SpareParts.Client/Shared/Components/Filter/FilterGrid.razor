@typeparam T

@using System.Collections.Immutable;
@using System.Text
@using Humanizer
@using SpareParts.Shared.Models

@inject IGraphQLRequestBuilder graphQLRequestBuilder

<div>
    @if(FilterGridState != null)
    {
        <div>
            @if (FilterGridState.FilterFields != null)
            {
                <ChipsList Chips="FilterGridState.FilterFields.Select(f => new Chip(f.ID, f.Name, f.IsSelected, GetChipColor(f), f.ParentFieldName)).ToList()" Title="Fields" OnToggleChip="HandleToggleField" />
            }
        </div>

        <div>
            @if (FilterGridState.FilterLines != null && FilterGridState.FilterFields != null)
            {
                <EditForm Model="FilterGridState.FilterLines" OnValidSubmit="HandleValidSubmit">
                    <div class="card mt-4">
                        <div class="card-body">
                            <div class="mt-4">
                                <h6 class="card-subtitle mb-2 text-muted">Filters</h6>
                                @foreach (var filterLine in FilterGridState.FilterLines)
                                {
                                    <FilterSelector Fields="FilterGridState.FilterFields.ToList()" FilterLine="filterLine"
                                        FilterLineChanged="HandleFilterLineChanged" OnRemoveFilter="HandleRemoveFilter" />
                                }
                                <div class="mt-2">
                                    <IconButton ButtonTitle="Add Filter" ButtonClass="btn-outline-dark tool-button" OnClick="AddEmptyFilter" Icon="IconButtonIcon.Plus" IconClass="tool-button-image" />
                                    <IconButton ButtonTitle="Search" ButtonType="ButtonType.Submit" ButtonClass="btn-outline-dark tool-button" Icon="IconButtonIcon.MagnifyingGlass" IconClass="tool-button-image" />                                    
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    }
    
    @if (_hasError)
    {
        <div class="alert alert-danger py-1">
            @_errorMessage
        </div>
    }
    
    @if(_filterResults != null && FilterGridState != null && FilterGridState.FilterFields != null)
    {
        <div class="mt-6">
            @if(_numberOfPages > 0)
            {
                <Pager OnPageChanged="HandlePageChanged" CurrentPage="FilterGridState.CurrentResultPage" PageSize="PageSize" TotalItemCount="_totalResultCount" />
            }

            <SimpleExpanderDataGrid T="T" DataSource="_filterResults" ColumnList="FilterGridState.FilterFields.Where(f => f.IsSelected).Select(f => new ColumnHeader(f.Name, f.ParentFieldName)).ToList()" OnRowClick="OnRowClick" />
        
        </div>
    }


</div>


@code
{
    [Parameter]
    public EventCallback<DataRow<T>> OnRowClick { get; set; }

    [Parameter]
    public string? RootGraphQLField { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<GraphQLRequest, Task<IPagedData<T>>>? ServiceCall { get; set; }

    [Parameter]
    public FilterGridState? FilterGridState { get; set; }

    [Parameter]
    public EventCallback<FilterGridState> OnFilterStateChanged { get; set; }

    private List<T>? _filterResults { get; set; }
    private const int MaxFilterLineCount = 5;

    private bool _isLoading;
    private bool _hasError;
    private string? _errorMessage;

    // paging
    private int _totalResultCount = 0;
    private int _numberOfPages = 0;
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        FilterGridState = FilterGridState ?? new FilterGridState();
        await InitializeFilterFields();

        if (HasFilterLines())
        {
            await Search();
        }
        else
        {
            await AddEmptyFilter();
        }

        _isLoading = false;
        _hasError = false;
        _errorMessage = string.Empty;
    }

    private async Task UpdateFilterGridState()
    {
        if (OnFilterStateChanged.HasDelegate)
        {
            await OnFilterStateChanged.InvokeAsync(FilterGridState);
        }
    }

    private async Task InitializeFilterFields()
    {
        if (FilterGridState != null && !FilterGridState.FilterFields.Any())
        {
            FilterGridState = FilterGridState with
            {
                FilterFields = ImmutableList.Create(GetFilterFields())
            };

            await UpdateFilterGridState();
        }
    }

    private FilterField[] GetFilterFields()
    {
        var props = typeof(T).GetProperties();
        var fields = new List<FilterField>();
        foreach (var prop in props)
        {
            if (prop.Name.ToLower() == "id")
            {
                continue;
            }
            if (prop.PropertyType.IsListType())
            {
                fields.AddRange(AddChildFields(fields, prop.Name, prop.PropertyType));
            }
            else
            {
                fields.Add(new FilterField(prop.Name, prop.PropertyType, true));
            }
        }

        return fields.ToArray();
    }

    // NOTE: This is only 1 level deep for simplicity. Use recursive method for more complex requirements.
    private List<FilterField> AddChildFields(List<FilterField> fields, string propertyName, Type propertyType)
    {
        Type itemType = propertyType.GetGenericArguments()[0];
        var props = itemType.GetProperties();
        return props.Select(p => new FilterField(p.Name, p.PropertyType, true, propertyName)).Where(f => f.Name.ToLower() != "id" && !f.Type.IsListType()).ToList();
    }

    private Dictionary<string, string> _chipColors = new Dictionary<string, string>();

    private string? GetChipColor(FilterField filterField)
    {
        if (filterField.ParentFieldName is null)
        {
            return null;
        }
        if (_chipColors.ContainsKey(filterField.ParentFieldName))
        {
            return _chipColors[filterField.ParentFieldName];
        }

        var chipColors = Enum.GetNames(typeof(ChipColor));
        Random rand = new Random();
        var col = chipColors[rand.Next(0, 6)];
        _chipColors.Add(filterField.ParentFieldName, col);
        return col;
    }

    private async Task AddEmptyFilter()
    {
        if (FilterGridState != null && FilterGridState.FilterLines != null && FilterGridState.FilterLines.Count <= MaxFilterLineCount - 1
                && FilterGridState.FilterFields != null)
        {
            FilterGridState = FilterGridState with
            {
                FilterLines = FilterGridState.FilterLines.Add(new FilterLine(FilterGridState.FilterFields.First(), FilterOperator.Equal, ""))
            };

            await UpdateFilterGridState();
        }
    }

    private async Task HandleFilterLineChanged(FilterLine filterLine)
    {
        if (FilterGridState != null)
        {
            var filterToUpdate = FilterGridState.FilterLines.FirstOrDefault(f => f.ID == filterLine.ID);
            if (filterToUpdate != null)
            {
                FilterGridState = FilterGridState with
                {
                    FilterLines = FilterGridState.FilterLines.Replace(filterToUpdate, filterLine)
                };
            }

            await UpdateFilterGridState();
        }
    }

    private async Task HandleRemoveFilter(FilterLine filterLine)
    {
        if (FilterGridState != null && HasFilterLines())
        {

            var filterLineToRemove = FilterGridState.FilterLines.FirstOrDefault(f => f.ID == filterLine.ID);

            if (filterLineToRemove != null)
            {
                FilterGridState = FilterGridState with
                {
                    FilterLines = FilterGridState.FilterLines.Remove(filterLineToRemove)
                };
            }

            await UpdateFilterGridState();
            await Search();
        }
    }

    private async Task HandleToggleField(Chip chip)
    {
        if (FilterGridState != null && HasFilterFields() && FilterGridState.FilterLines != null && chip != null)
        {
            var isFilterSelected = FilterGridState.FilterLines.FirstOrDefault(f => f.SelectedField.ID == chip.ID) != null;
            if (!isFilterSelected)  // don't toggle chip if the filter is in use
            {
                var itemToToggle = FilterGridState.FilterFields.FirstOrDefault(f => f.ID == chip.ID);

                if (itemToToggle != null)
                {
                    FilterGridState = FilterGridState with
                    {
                        FilterFields = FilterGridState.FilterFields.Replace(itemToToggle, new FilterField(itemToToggle.Name, itemToToggle.Type, !itemToToggle.IsSelected, itemToToggle.ParentFieldName))
                    };
                }

                await UpdateFilterGridState();
                await Search();
            }
        }
    }

    private async Task HandleValidSubmit(EditContext context)
    {
        await Search();
    }

    private async Task Search()
    {
        ClearFilterResults();
        if (FilterGridState != null && HasFilterLines() && HasFilterFields())
        {
            var validator = new FilterLinesValidator();
            var filterFieldsList = FilterGridState.FilterLines.ToList();
            var validationResult = validator.Validate(filterFieldsList);
            if (validationResult.IsValid)
            {
                var pageOffset = new PageOffset(FilterGridState.CurrentResultPage * PageSize - PageSize, PageSize);
                var graphQLRequest = graphQLRequestBuilder.Build<T>(filterFieldsList, FilterGridState.FilterFields.ToList(), RootGraphQLField, pageOffset);

                if (ServiceCall != null)
                {
                    _isLoading = true;
                    var serviceResult = await ServiceCall.Invoke(graphQLRequest);

                    if (serviceResult != null && serviceResult.Items != null && serviceResult.Items.Any())
                    {
                        _filterResults = serviceResult.Items;
                        _totalResultCount = serviceResult.TotalCount;
                        _numberOfPages = GetNumberOfPages(_totalResultCount);
                        _hasError = false;
                        _errorMessage = string.Empty;
                    }   
                    else
                    {
                        _hasError = true;
                        _errorMessage = "No results found";
                    }

                    _isLoading = false;
                }
            }
            else
            {
                _hasError = true;
                var sb = new StringBuilder();
                for (int i = 0; i < validationResult.Errors.Count; i++)
                {
                    var error = validationResult.Errors[i];
                    sb.AppendLine($"Row {i} is invalid. {error.ErrorMessage}");
                }
                _errorMessage = sb.ToString();

                return;
            }
        }
    }

    private bool HasFilterFields()
    {
        return FilterGridState != null && FilterGridState.FilterFields != null && FilterGridState.FilterFields.Any();
    }

    private bool HasFilterLines()
    {
        return FilterGridState != null && FilterGridState.FilterLines != null && FilterGridState.FilterLines.Any();
    }

    private void ClearFilterResults()
    {
        _filterResults = new List<T>();
    }

    private int GetNumberOfPages(int totalItemCount)
    {
        if (totalItemCount > PageSize)
        {
            var pageCount = (decimal)totalItemCount / (decimal)PageSize;
            return Convert.ToInt32(Math.Ceiling(pageCount));
        }

        return 0;
    }

    private async Task HandlePageChanged(int page)
    {
        if(FilterGridState != null)
        {
            FilterGridState = FilterGridState with
                {
                    CurrentResultPage = page
                };

            await UpdateFilterGridState();
        }
        
        await Search();
    }
}
