@page "/part-search"
@attribute [Authorize(Roles = Role.Administrator)]

@using SpareParts.Shared.Models

@inject IServiceWrapper ServiceWrapper
@inject IPartService PartService

<h3>Part Search</h3>
@if (_filterLines != null)
{
    <EditForm Model="_filterLines" OnSubmit="Search">

        @foreach (var filterLine in _filterLines)
        {
            <FilterSelector Fields="_filterFields" Operators="_operators" FilterLine="filterLine" OnRemoveFilter="RemoveFilter" />
        }

        <button type="button" class="btn btn-secondary my-1" @onclick="AddFilter">Add Filter</button>
        <button type="submit" class="btn btn-primary my-1">Search</button>
    </EditForm>
}

@if (_parts != null && _parts.Any())
{
    <table id="partTable" class="table table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Weight (kg)</th>
                <th>Price</th>
                <th>Start Date</th>
                <th>End Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var part in _parts)
            {
                <tr>
                    <td>@part.Name</td>
                    <td>@part.Description</td>
                    <td>@part.Weight.ToString("F2")</td>
                    <td>@part.Price.ToString("C2")</td>
                    <td>@part.StartDate.ToString("dd/MM/yyyy")</td>
                    <td>@part.EndDate?.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (_hasError)
{
    <div class="alert alert-danger py-1">
        @_errorMessage
    </div>
}


@code {
    private bool _hasDeleted;
    private bool _hasError;
    private string? _errorMessage;
    private List<Part>? _parts;

    private List<FilterField>? _filterFields;
    private List<String>? _operators;
    private List<FilterLine>? _filterLines;
    private const int MaxFilterLineCount = 5;

    private int _totalItemCount;
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        _hasDeleted = false;
        _hasError = false;
        _errorMessage = "";

        _filterFields = GetFilterFields();
        _operators = new List<string> { "eq", "neq", "contains", "gt", "gte", "lt", "lte", "startsWith", "endsWith" };
        _filterLines = new List<FilterLine>();
        _filterLines.Add(new FilterLine());
        _parts = new List<Part>();
    }

    private async Task Search(EditContext context)
    {
        await RefreshPartsList();
    }

    private void AddFilter()
    {
        if (_filterLines != null && _filterLines.Count <= MaxFilterLineCount -1)
        {
            _filterLines?.Add(new FilterLine());
        }
    }

    private bool ValueRequiresQuotes(FilterLine filterLine)
    {
        return typeof(string).IsAssignableFrom(filterLine.SelectedField.Type) ||
                typeof(DateTime).IsAssignableFrom(filterLine.SelectedField.Type) ||
                typeof(DateTime?).IsAssignableFrom(filterLine.SelectedField.Type);
    }

    private string GetFilterLineValue(FilterLine filterLine)
    {
        if(ValueRequiresQuotes(filterLine))
        {
            return $"\"{ filterLine.Value}\"";
        }

        return filterLine.Value;
    }

    private string GetFilterString(FilterLine filterLine)
    {
        var filterLineValue = GetFilterLineValue(filterLine);
        return $" {filterLine.SelectedField.Name.ToLower()}: {{{filterLine.SelectedOperator}:{filterLineValue} }}";
    }

    private async Task RefreshPartsList()
    {
        _parts = new List<Part>();

        if(_filterLines != null && _filterLines.Count > 0)
        {
            var filter = "";
            if(_filterLines.Count == 1)
            {
                filter = GetFilterString(_filterLines.First());
            }
            else
            {
                const string filterAndPrefix = " and: {";

                foreach(var filterLine in _filterLines)
                {
                    filter += filterAndPrefix + GetFilterString(filterLine);
                }
                filter = filter.Remove(0, filterAndPrefix.Length);
            }

            for (int i = 0; i < _filterLines.Count -1; i++)
            {
                filter += "}";
            }

            var partRequest = new GraphQLRequest
                {
                    query = $@"{{
                        parts (where: {{{filter}}}) {{
                            name
                            description
                            weight
                            price
                            startDate
                            endDate
                        }}
                    }}"
                };


            var partResponse = await ServiceWrapper.ServiceCall(() => PartService.Search(partRequest), "An error occurred searching for part.");

            if (partResponse.Data != null && partResponse.Data.Parts != null)
            {
                _parts = partResponse.Data.Parts;
            }
        }           
    }

    private void RemoveFilter(FilterLine filterLine)
    {
        if(_filterLines != null)
        {
            var itemToRemove = _filterLines.FirstOrDefault(f => f.Equals(filterLine));
            if (itemToRemove != null)
            {
                _filterLines.Remove(itemToRemove);
            }
        }
    }

    public class MyGraphQLResponse
    {
        public MyGraphQLData? Data { get; set; }
    }

    public class MyGraphQLData
    {
        public List<Part>? Parts { get; set; }
    }

    
    private List<FilterField> GetFilterFields()
    {
        var props = typeof(Part).GetProperties();
        return props.Select(p => new FilterField(p.Name, p.PropertyType)).ToList();
    }
}
