@using System.Linq.Expressions;

<div class="row">
    @if(Fields != null && Operators != null)
    {
        <div class="col">
            <InputSelect class="form-select" @bind-Value="@SelectedFieldName">
                @foreach (var field in Fields)
                {
                    <option>@field.Name</option>
                }
            </InputSelect>
        </div>
        <div class="col">
            <InputSelect class="form-select" @bind-Value="@SelectedOperator">
                @foreach (var operatorName in Operators)
                {
                    <option>@operatorName</option>
                }
            </InputSelect>
        </div>
        <div class="col">
            <InputText class="form-control" @bind-Value="@Value" />
        </div>
        <div class="col">
            <a @onclick="() => HandleRemoveFilter()"><span class="oi oi-x"></span></a>
        </div>
    }
</div>
@code {
    [Parameter, EditorRequired]
    public List<FilterField>? Fields { get; set; }

    [Parameter, EditorRequired]
    public List<string>? Operators { get; set; }

    private string? _selectedFieldName;
    private String SelectedFieldName
    {
        get => _selectedFieldName;
        set
        {
            if(value != _selectedFieldName)
            {
                _selectedFieldName = value;
                SelectedField = Fields.First(f => f.Name == value);
            }
        }
    }

    private FilterField? _selectedField;
    [Parameter]
    public virtual FilterField? SelectedField
    { 
        get => _selectedField;
        set
        {
            if(value != _selectedField)
            {
                _selectedField = value;
                SelectedFieldChanged.InvokeAsync(value);
            }    
        } 
    }

    [Parameter]
    public EventCallback<FilterField> SelectedFieldChanged { get; set; }

    [Parameter]
    public Expression<Func<FilterField>>? SelectedFieldExpression { get; set; }

    private string? _selectedOperator;
    [Parameter]
    public virtual string? SelectedOperator 
    { 
        get => _selectedOperator;
        set
        {
            if(value != _selectedOperator)
            {
                _selectedOperator = value;
                SelectedOperatorChanged.InvokeAsync(value);
            }    
        } 
    }

    [Parameter]
    public EventCallback<string> SelectedOperatorChanged { get; set; }

    [Parameter]
    public Expression<Func<string>>? SelectedOperatorExpression { get; set; }


    private string? _value;
    [Parameter]
    public virtual string? Value 
    { 
        get => _value; 
        set
        {
            if(value != _value)
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }    
        } 
    }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<string>>? ValueExpression { get; set; }

    [Parameter]
    public EventCallback<FilterLine> OnRemoveFilter { get; set; }

    private async Task HandleRemoveFilter()
    {      
        if(SelectedField != null && SelectedOperator != null && Value != null)
        {
            await OnRemoveFilter.InvokeAsync(new FilterLine(SelectedField, SelectedOperator, Value));
        }
    }
}
