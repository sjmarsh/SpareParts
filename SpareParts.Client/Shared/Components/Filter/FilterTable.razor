@typeparam T

@using SpareParts.Shared.Models

@inject IServiceWrapper ServiceWrapper
@inject IPartService PartService

<div>
    <div>
        @if(_filterFields != null && _filterFields.Any())
        {
            <Chips ChipLabels="_filterFields.Select(f => f.Name).ToList()" OnRemoveChip="HandleRemoveField"/>
        }
    </div>

    <div>
        @if (_filterLines != null)
        {
            <EditForm Model="_filterLines" OnSubmit="HandleSubmit">

                @foreach (var filterLine in _filterLines)
                {
                    <FilterSelector Fields="_filterFields" Operators="_operators" FilterLine="filterLine" OnRemoveFilter="RemoveFilter" />
                }
                <div class="mt-2">
                    <button type="button" class="btn btn-secondary my-1" @onclick="AddFilter">Add Filter</button>
                    <button type="submit" class="btn btn-primary my-1">Search</button>
                </div>
            </EditForm>
        }
    </div>

    @if(_filterResults != null && _filterFields != null){
        <SimpleDataGrid T="Part" DataSource="_filterResults" ColumnList="_filterFields.Select(f => f.Name).ToList()" OnRowClick="OnRowClick" />
    }
        
</div>


@code
{
    [Parameter]
    public EventCallback<Dictionary<string, string>> OnRowClick { get; set; }

    private List<Part>? _filterResults { get; set; }

    private List<FilterField>? _filterFields;
    private List<String>? _operators;
    private List<FilterLine>? _filterLines;
    private const int MaxFilterLineCount = 5;

    // TODO PAGING
    private int _totalItemCount;
    private const int PageSize = 10;


    protected override void OnInitialized()
    {   
        _filterFields = GetFilterFields();
        _operators = new List<string> { "eq", "neq", "contains", "gt", "gte", "lt", "lte", "startsWith", "endsWith" };
        _filterLines = new List<FilterLine>();
        _filterLines.Add(new FilterLine());
    }


    private List<FilterField> GetFilterFields()
    {
        var props = typeof(T).GetProperties();
        return props.Select(p => new FilterField(p.Name, p.PropertyType)).ToList();
    }

    private async Task HandleRemoveField(string fieldName)
    {
        if(_filterFields != null && fieldName != null)
        {
            var itemToRemove = _filterFields.FirstOrDefault(f => f.Name == fieldName);
            var filterAlreadyUsed = _filterLines.FirstOrDefault(f => f.SelectedField.Name == fieldName) != null;
            if(itemToRemove != null && !filterAlreadyUsed)
            {
                _filterFields.Remove(itemToRemove);
                await Search();
            }
        }
    }

    private async Task HandleSubmit(EditContext context)
    {
        await Search();
    }

    private void AddFilter()
    {
        if (_filterLines != null && _filterLines.Count <= MaxFilterLineCount - 1)
        {
            _filterLines?.Add(new FilterLine());
        }
    }

    private bool ValueRequiresQuotes(FilterLine filterLine)
    {
        return typeof(string).IsAssignableFrom(filterLine.SelectedField.Type) ||
                typeof(DateTime).IsAssignableFrom(filterLine.SelectedField.Type) ||
                typeof(DateTime?).IsAssignableFrom(filterLine.SelectedField.Type);
    }

    private string GetFilterLineValue(FilterLine filterLine)
    {
        if (ValueRequiresQuotes(filterLine))
        {
            return $"\"{filterLine.Value}\"";
        }

        return filterLine.Value;
    }

    private string GetFilterString(FilterLine filterLine)
    {
        var filterLineValue = GetFilterLineValue(filterLine);
        return $" {filterLine.SelectedField.Name.ToLower()}: {{{filterLine.SelectedOperator}:{filterLineValue} }}";
    }

    private async Task RemoveFilter(FilterLine filterLine)
    {
        if (_filterLines != null)
        {
            var itemToRemove = _filterLines.FirstOrDefault(f => f.Equals(filterLine));
            if (itemToRemove != null)
            {
                _filterLines.Remove(itemToRemove);
                await Search();
            }
        }
    }

    private string BuildQueryFilter()
    {
        var filter = "";
        if(_filterLines != null)
        {
            if (_filterLines.Count == 1)
            {
                filter = GetFilterString(_filterLines.First());
            }
            else
            {
                const string filterAndPrefix = " and: {";

                foreach (var filterLine in _filterLines)
                {
                    filter += filterAndPrefix + GetFilterString(filterLine);
                }
                filter = filter.Remove(0, filterAndPrefix.Length);
            }

            for (int i = 0; i < _filterLines.Count - 1; i++)
            {
                filter += "}";
            }
        }
        return filter;
    }

    private async Task Search()
    {
        if (_filterLines != null)
        {
            if (_filterLines.Any())
            {
                var filter = BuildQueryFilter();

                var partRequest = new GraphQLRequest
                    {
                        query = $@"{{
                        parts (where: {{{filter}}}) {{
                            name
                            description
                            weight
                            price
                            startDate
                            endDate
                        }}
                    }}"
                    };

                var partResponse = await ServiceWrapper.ServiceCall(() => PartService.Search(partRequest), "An error occurred searching for part.");

                if (partResponse.Data != null && partResponse.Data.Parts != null)
                {
                    _filterResults = partResponse.Data.Parts;
                    
                }
            }
            else
            {
                _filterResults = new List<Part>();
            }
        }
    }

    public class MyGraphQLResponse
    {
        public MyGraphQLData? Data { get; set; }
    }

    public class MyGraphQLData
    {
        public List<T>? Parts { get; set; }
    }
}
