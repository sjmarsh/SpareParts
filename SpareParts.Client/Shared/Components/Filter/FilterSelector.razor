@using System.Linq.Expressions;

<div class="row mt-2">
    @if(Fields != null && _operators != null)
    {
        <div class="col">
            <div class="form-group my-2">
                <InputSelect id="field" class="form-select" Value="@SelectedFieldName" ValueExpression="() => SelectedFieldName" ValueChanged="(string value) => HandleFieldSelectedValueChanged(value)" >
                    @foreach (var field in Fields.Where(f => f.IsSelected))
                    {
                        <option>@field.Name</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="col">
            <div class="form-group my-2">
                <InputSelect id="operator" class="form-select" @bind-Value="SelectedOperatorName">
                    @foreach (var optr in _operators)
                    {
                        <option value="@optr.Name">@optr.Name</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="col">
            @if (_isEnumField)
            {
                <InputSelect id="valueSelect" class="form-select" @bind-Value="@Value">
                    @foreach (var item in _enumValues)
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
            }
            else
            {
                <ValidInputText Id="value" @bind-Value="@Value" />
            }            
        </div>
        <div class="col">
            <div class="form-group my-2">
                <a id="remove" @onclick="() => HandleRemoveFilter()"><span class="oi oi-x"></span></a>
            </div>
        </div>
    }
</div>
@code {
    [Parameter, EditorRequired]
    public List<FilterField>? Fields { get; set; }

#pragma warning disable CS8618
    private FilterLine _filterLine;
#pragma warning restore CS8618
#pragma warning disable BL0007
    [Parameter, EditorRequired]
    public FilterLine FilterLine
#pragma warning restore BL0007
    {
        get => _filterLine;
        set
        {
            _filterLine = value;
            SelectedFieldName = _filterLine.SelectedField.Name;
            UpdateSelectedOperatorAndValue(SelectedFieldName, _filterLine.SelectedOperator, _filterLine.Value);
        }
    }

    [Parameter]
    public EventCallback<FilterLine> FilterLineChanged { get; set; }

    [Parameter]
    public Expression<Func<FilterLine>>? FilterLineExpression { get; set; }

    [Parameter]
    public EventCallback<FilterLine> OnRemoveFilter { get; set; }

    private string? _selectedFieldName;
    private string? SelectedFieldName
    {
        get => _selectedFieldName;
        set
        {
            if (value != _selectedFieldName)
            {
                _selectedFieldName = value;
                FilterLine.SelectedField = Fields!.First(f => f.Name == value);
            }
        }
    }

    private string? _selectedOperatorName;
    private string? SelectedOperatorName
    {
        get => _selectedOperatorName;
        set
        {
            if (value != _selectedOperatorName)
            {
                _selectedOperatorName = value;
                FilterLine.SelectedOperator = GetOperatorForName(value);
            }
        }
    }

    private string? _value;
    private string? Value
    {
        get => _value;
        set
        {
            if (value != _value)
            {
                _value = value;
                FilterLine.Value = value!;
            }
        }
    }

    private bool _isEnumField;
    private string _selectedValue = "";
    private List<string> _enumValues = new List<string>();
    private List<NamedFilterOperator> _operators = new List<NamedFilterOperator>();
        
    private string GetOperatorForName(string? operatorName)
    {
        var oprtr = "eq";
        if (operatorName != null)
        {
            var op = _operators.FirstOrDefault(o => o.Name == operatorName);
            if (op != null)
            {
                oprtr = op.FilterOperator;
            }
        }
        return oprtr;
    }

    private async Task HandleRemoveFilter()
    {
        if (FilterLine != null)
        {
            await OnRemoveFilter.InvokeAsync(FilterLine);
        }
    }

    private void HandleFieldSelectedValueChanged(string fieldName)
    {
        if (fieldName != null)
        {
            UpdateSelectedOperatorAndValue(fieldName);
        }
    }

    private void UpdateSelectedOperatorAndValue(string selectedFieldName, string? selectedOperator = null, string? value = null)
    {
        SelectedFieldName = selectedFieldName;
        var selectedField = Fields!.First(f => f.Name == selectedFieldName);
        
        _isEnumField = selectedField.Type.IsEnum;
        if (_isEnumField)
        {
            _enumValues = Enum.GetNames(selectedField.Type).ToList();
        }

        if (selectedField.Type.IsNumericType() || selectedField.Type.IsDateType())
        {
            _operators = FilterOperator.NamedFilterOperatorsForDatesAndNumbers().ToList();
        }
        else
        {
            _operators = FilterOperator.NamedFilterOperatorsForStrings().ToList();
        }

        if (selectedOperator != null)
        {
            SelectedOperatorName = _operators.First(o => o.FilterOperator == selectedOperator).Name;
        }
        else
        {
            SelectedOperatorName = _operators.First().Name;
        }

        Value = value;
    }
}
