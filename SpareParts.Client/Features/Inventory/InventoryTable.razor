@using SpareParts.Shared.Models;

@inject IInventoryService InventoryService
@inject IServiceWrapper ServiceWrapper
@inject NavigationManager NavManager

@if(_inventoryItems != null && _inventoryItems.Any())
{
    <div class="tool-container">
        <button class="btn btn-outline-dark tool-button" @onclick="OpenReport"><span class="oi oi-print tool-button-image" title="Report" aria-hidden="true"/><span>Report</span></button>    
    </div>
    

    <table class="table table-hover">
        <thead>
            <tr>
                <th>Part Name</th>
                <th>Quantity</th>
                <th>Date Recorded</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var item in _inventoryItems)
            {
                <tr>
                    <td>@item.PartName</td>
                    <td>@item.Quantity</td>
                    <td>@item.DateRecorded</td>
                </tr>
            }
        </tbody>
    </table>
    <Pager TotalItemCount="_totalItemCount" PageSize="PageSize" OnPageChanged="HandlePageChanged"/>
}
@if(_hasError)
{
    <div class="alert alert-danger py-1">
        @_errorMessage
    </div>
}


@code {

    [Parameter]
    public bool IsCurrentOnly { get; set; }

    private bool _hasError;
    private string? _errorMessage;
    private List<InventoryItemDetail>? _inventoryItems;

    private int _currentPage;
    private int _totalItemCount;
    private const int PageSize = 10;

    protected async override Task OnInitializedAsync()
    {
        _hasError = false;
        _errorMessage = string.Empty;
        _currentPage = 1;

        await RefreshInventoryItemList();
    }

    private async Task RefreshInventoryItemList()
    {        
        var skip = (_currentPage - 1) * PageSize;

        var response = await ServiceWrapper.ServiceCall(() => InventoryService.IndexDetail(IsCurrentOnly, skip, PageSize), "An error occurred retrieving inventory items.");

        if (response == null)
        {
            _hasError = true;
        }
        else
        {
            if (response.HasError)
            {
                _hasError = true;
                _errorMessage = response.Message;
            }

            _inventoryItems = response.Items?.OrderBy(i => i.PartName).ThenByDescending(i => i.DateRecorded).ToList();
            _totalItemCount = response.TotalItemCount;
        }
    }

    private async Task HandlePageChanged(int page)
    {
        _currentPage = page;
        await RefreshInventoryItemList();
    }

    private void OpenReport()
    {
        var reportId = IsCurrentOnly ? ReportID.InventoryCurrent : ReportID.InventoryHistory;
        NavManager.NavigateTo($"/report/{reportId}");
    }
}
