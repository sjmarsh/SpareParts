@using SpareParts.Shared.Models;

@inject IPartService PartService
@inject HttpClient HttpClient
@inject IServiceWrapper ServiceWrapper

<h3>@_modeDescription Part</h3>

@if(_part != null)
{
    <EditForm Model="_part" OnValidSubmit="@SubmitValidForm">
        <FluentValidationValidator/>
 
        <ValidInputText Id="partName" DisplayName="Name" @bind-Value="_part.Name" />
        <ValidInputText Id="partDescription" DisplayName="Description" @bind-Value="_part.Description" />
        <ValidInputNumber Id="weight" DisplayName="Weight (kg)" @bind-Value="_part.Weight" />
        <ValidInputNumberFormat Id="price" DisplayName="Price" ValueExpression="() => _part.Price" StringFormat="C"/> 
        <ValidInputDate Id="startDate" DisplayName="Start Date" @bind-Value="_part.StartDate" />
        <ValidInputDate Id="endDate" DisplayName="End Date" @bind-Value="_part.EndDate" />

        <div class="my-3">
            <details>
                <summary>Attributes</summary>
                <div class="card card-body">
                    <IconButton ButtonTitle="Add Attribute" ButtonClass="btn-outline-dark w-25" Icon="IconButtonIcon.Plus" IconClass="tool-button-image" OnClick="AddAttribute" />
                    @if(_part.Attributes != null && _part.Attributes.Any())
                    {
                        <table>
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Value</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var attrib in _part.Attributes)
                                {
                                    <tr>
                                        <td><InputText DisplayName="Name" @bind-Value="@attrib.Name"/></td>
                                        <td><InputText DisplayName="Description" @bind-Value="@attrib.Description" /></td>
                                        <td><InputText DisplayName="Value" @bind-Value="@attrib.Value" /></td>
                                        <td><LinkButton ID="@($"delete-{attrib.Name}")" ButtonTitle="Delete" OnClick="() => DeleteAttribute(attrib.ID)"/></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </details>
        </div>

        <ValidationSummary class="alert alert-danger py-1" />

        <div class="my-3">
            <button type="submit" class="btn btn-primary my-1" >Submit</button>
        </div>

    </EditForm>   
}
 @if(_hasError)
{
    <div class="alert alert-danger py-1">
        @_errorMessage
    </div>
}
@if(_hasSubmitted && !_hasError)
{
    <div class="alert alert-success py-1">
        Success
    </div>
}

@code {

    [Parameter]
    public int? PartID { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private Part? _part;
    private bool _isEdit;
    private bool _hasSubmitted;
    private bool _hasError;
    private string? _errorMessage;

    private string? _modeDescription => _isEdit ? "Edit" : "Add";

    protected async override Task OnInitializedAsync()
    {       
        _isEdit = PartID.HasValue && PartID > 0;

        _hasError = false;
        _hasSubmitted = false;

        if(_isEdit && PartID.HasValue)
        {
            var partResponse = await ServiceWrapper.ServiceCall(() => PartService.Get(PartID.Value), "An error occurred retrieving part.");
            if (partResponse == null)
            {
                _hasError = true;
            }
            else
            {
                if (partResponse.HasError)
                {
                    _hasError = true;
                    _errorMessage = partResponse.Message;
                }
                _part = partResponse.Value;
            }            
        }
        else
        {
            _part = new Part();    
        }        
    }

    private void AddAttribute()
    {
        if(_part!.Attributes == null)
        {
            _part.Attributes = new List<PartAttribute>();
        }
        _part.Attributes.Add(new PartAttribute());
    }

    private void DeleteAttribute(int attributeId)
    {
        var attributeToDelete = _part!.Attributes!.FirstOrDefault(a => a.ID == attributeId);
        if(attributeToDelete != null)
        {
            _part!.Attributes!.Remove(attributeToDelete);
        }
    }

    private async Task SubmitValidForm(EditContext context)
    {        
        if (_part != null)
        {
            _hasSubmitted = true;

            PartResponse partResponse;
                        
            if (_isEdit)
            {
                partResponse = await ServiceWrapper.ServiceCall(() => PartService.Put(_part), "An error occurred updating part.");
            }
            else
            {
                partResponse = await ServiceWrapper.ServiceCall(() => PartService.Post(_part), "An error occurred adding part.");
            }

            if (partResponse == null || partResponse.HasError)
            {
                _hasError = true;
                _errorMessage = partResponse?.Message;
            }
            else
            {
                _isEdit = true;
                _part = partResponse.Value;
                await OnValidSubmit.InvokeAsync();
            }
        }
    }   
}
