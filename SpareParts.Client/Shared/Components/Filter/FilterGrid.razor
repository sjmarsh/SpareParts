@typeparam T

@using SpareParts.Shared.Models
@using System.Text
@using Humanizer

@inject IGraphQLRequestBuilder graphQLRequestBuilder

<div>
    <div>
        @if(_filterFields != null && _filterFields.Any())
        {
            <ChipsList Chips="_filterFields.Select(f => new Chip(f.Name, f.IsSelected)).ToList()" Title="Fields" OnToggleChip="HandleToggleField"/>
        }
    </div>

    <div>
        @if (_filterLines != null)
        {
            <EditForm Model="_filterLines" OnValidSubmit="HandleValidSubmit">

                <div class="card mt-2">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-2 text-muted">Filters</h6>
                        @foreach (var filterLine in _filterLines)
                        {
                            <FilterSelector Fields="_filterFields" Operators="_operators" FilterLine="filterLine" OnRemoveFilter="RemoveFilter" />
                        }
                        <div class="mt-2">
                            <button type="button" class="btn btn-secondary my-1" @onclick="AddFilter">Add Filter</button>
                            <button type="submit" class="btn btn-primary my-1">Search</button>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </div>
    @if (_hasError)
    {
        <div class="alert alert-danger py-1">
            @_errorMessage
        </div>
    }

    @if(_filterResults != null && _filterFields != null){
        <SimpleDataGrid T="T" DataSource="_filterResults" ColumnList="_filterFields.Where(f => f.IsSelected).Select(f => f.Name).ToList()" OnRowClick="OnRowClick" />
    }
        
</div>


@code
{
    [Parameter]
    public EventCallback<Dictionary<string, string>> OnRowClick { get; set; }

    [Parameter]
    public string? RootGraphQLField { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<GraphQLRequest, Task<List<T>>>? ServiceCall { get; set; }

    private List<T>? _filterResults { get; set; }

    private List<FilterField>? _filterFields;
    private List<NamedFilterOperator>? _operators;
    private List<FilterLine>? _filterLines;
    private const int MaxFilterLineCount = 5;

    private bool _hasError;
    private string? _errorMessage;

    // TODO PAGING
    private int _totalItemCount;
    private const int PageSize = 10;


    protected override void OnInitialized()
    {   
        _filterFields = GetFilterFields();
        _operators = FilterOperator.NamedFilterOperators().ToList();
        _filterLines = new List<FilterLine>();
        AddFilter();

        _hasError = false;
        _errorMessage = string.Empty;
    }


    private List<FilterField> GetFilterFields()
    {
        var props = typeof(T).GetProperties();
        var fields = props.Select(p => new FilterField(p.Name, p.PropertyType, true)).Where(f => f.Name.ToLower() != "id");
        return fields.ToList();
    }

    private void AddFilter()
    {
        if (_filterLines != null && _filterLines.Count <= MaxFilterLineCount - 1
                && _filterFields != null && _filterFields.Any())
        {
            _filterLines?.Add(new FilterLine(_filterFields.First(), FilterOperator.Equal, ""));
        }
    }

    private async Task RemoveFilter(FilterLine filterLine)
    {
        if (HasFilterLines())
        {
            var itemToRemove = _filterLines?.FirstOrDefault(f => f.Equals(filterLine));
            if (itemToRemove != null)
            {
                _filterLines?.Remove(itemToRemove);
                await Search();
            }
        }
    }

    private async Task HandleToggleField(Chip chip)
    {
        if(_filterFields != null && _filterLines != null && chip != null)
        {
            var itemToToggle = _filterFields.FirstOrDefault(f => f.Name == chip.Name);
            var filterAlreadyUsed = _filterLines.FirstOrDefault(f => f.SelectedField.Name == chip.Name) != null;
            if(itemToToggle != null && !filterAlreadyUsed)
            {
                itemToToggle.IsSelected = chip.IsActive;
                await Search();
            }
        }
    }

    private async Task HandleValidSubmit(EditContext context)
    {
        await Search();
    }

    private async Task Search()
    {
        ClearFilterResults();
        if (HasFilterLines() && HasFilterFields())
        {
            var validator = new FilterLinesValidator();
            var validationResult = validator.Validate(_filterLines);
            if (validationResult.IsValid)
            {
                var graphQLRequest = graphQLRequestBuilder.Build<T>(_filterLines, _filterFields);

                if(ServiceCall != null)
                {
                    var serviceResult = await ServiceCall.Invoke(graphQLRequest);

                    if (serviceResult != null && serviceResult.Any())
                    {
                        _filterResults = serviceResult;
                        _hasError = false;
                        _errorMessage = string.Empty;
                    }
                    else
                    {
                        _hasError = true;
                        _errorMessage = "No results found";
                    }
                }
            }
            else
            {
                _hasError = true;
                var sb = new StringBuilder();
                for (int i = 0; i < validationResult.Errors.Count; i++)
                {
                    var error = validationResult.Errors[i];
                    sb.AppendLine($"Row {i} is invalid. {error.ErrorMessage}");
                }
                _errorMessage = sb.ToString();
                
                return;
            }            
        }
    }

    private bool HasFilterFields()
    {
        return _filterFields != null && _filterFields.Any();
    }

    private bool HasFilterLines()
    {
        return _filterLines != null && _filterLines.Any();
    }

    private void ClearFilterResults()
    {
        _filterResults = new List<T>();
    }
}
