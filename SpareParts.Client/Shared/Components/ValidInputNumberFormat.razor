@using System.Globalization
@using System.Linq.Expressions
@using SpareParts.Shared.Extensions

<div class="form-group my-2">

    @if(DisplayName != null)
    {
        <label for="@Id">@DisplayName</label>
    }
    <input id="@Id" type="string" class="form-control @_validClass @CssClass" 
        value="@_displayValue" @onchange="@(e => _displayValue = HandleOnChanged(e))" @oninvalid="HandleInvalid" />

    @if(ValueExpression != null)
    {
        <ValidationMessage For="ValueExpression" />    
    }
    
</div>

@code {

    [Parameter, EditorRequired] 
    public string? Id { get; set; }

    [Parameter]
    public string? DisplayName { get; set; }

    [Parameter]
    public string? StringFormat { get; set; }

    [Parameter]
    public string? CssClass { get; set; }
       
    [Parameter, EditorRequired] 
    public Expression<Func<double>> ValueExpression { get; set; } = default!;

    // This will come from the EditForm that this component should be wrapped in when used
    [CascadingParameter]
    private EditContext CascadedEditContext { get; set; } = default!;

    private string _displayValue = "";
    private string _validClass = "";

    protected override void OnInitialized()
    {
        _displayValue = GetDisplayValue();
    }

    private string GetDisplayValue()
    {
        var value = ValueExpression.GetValueFromExpression();
        return value.ToString(StringFormat);
    }

    private string HandleOnChanged(ChangeEventArgs e)
    {
        if(e != null && e.Value != null && double.TryParse(e.Value.ToString(), NumberStyles.Any, CultureInfo.CurrentCulture, out var numVal))
        {
            ValueExpression.SetValueToExpression(CascadedEditContext.Model, numVal);
            HandleModelValidation();
            return numVal.ToString(StringFormat);
        }
        else
        {
            _validClass = "modified invalid aria-invalid";
            return string.Empty;
        }
    }

    private void HandleModelValidation()
    {
        if(CascadedEditContext != null && ValueExpression != null)
        {
            var fieldName = ValueExpression.GetMemberNameFromExpression();
            var field = CascadedEditContext.Field(fieldName); 
            CascadedEditContext.NotifyFieldChanged(field);
            if (CascadedEditContext.GetValidationMessages(field).Any())
            {
                _validClass = "modified invalid aria-invalid";
            }
            else
            {
                _validClass = "modified valid aria-valid";
            }
        }
    }

    private void HandleInvalid()
    {
        // fallback HTML validation
        _validClass = "modified invalid aria-invalid";
    }    
}