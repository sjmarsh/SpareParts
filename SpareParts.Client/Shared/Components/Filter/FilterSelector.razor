@using System.Linq.Expressions;

<div class="row mt-2">
    @if(Fields != null && Operators != null)
    {
        <div class="col">
            <div class="form-group my-2">
                <InputSelect class="form-select" @bind-Value="@SelectedFieldName">
                    @foreach (var field in Fields.Where(f => f.IsSelected))
                    {
                        <option>@field.Name</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="col">
            <div class="form-group my-2">
                <InputSelect class="form-select" @bind-Value="@SelectedOperator">
                    @foreach (var operatorName in Operators)
                    {
                        <option>@operatorName</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="col">
            <ValidInputText Id="value" @bind-Value="@Value" />
        </div>
        <div class="col">
            <div class="form-group my-2">
                <a @onclick="() => HandleRemoveFilter()"><span class="oi oi-x"></span></a>
            </div>
        </div>
    }
</div>
@code {
    [Parameter, EditorRequired]
    public List<FilterField>? Fields { get; set; }

    [Parameter, EditorRequired]
    public List<string>? Operators { get; set; }

    [Parameter, EditorRequired]
    public FilterLine? FilterLine { get; set; }

    [Parameter]
    public EventCallback<FilterLine> FilterLineChanged { get; set; }

    [Parameter]
    public Expression<Func<FilterLine>>? FilterLineExpression { get; set; }

    private string? _selectedFieldName;
    private string SelectedFieldName
    {
        get => _selectedFieldName;
        set
        {
            if(value != _selectedFieldName)
            {
                _selectedFieldName = value;
                FilterLine.SelectedField = Fields.First(f => f.Name == value);
                FilterLineChanged.InvokeAsync(FilterLine);
            }
        }
    }

    private string? _selectedOperator;
    private string? SelectedOperator
    {
        get => _selectedOperator;
        set
        {
            if (value != _selectedOperator)
            {
                _selectedOperator = value;
                FilterLine.SelectedOperator = value;
                FilterLineChanged.InvokeAsync(FilterLine);
            }
        }
    }

    private string? _value;
    private string? Value
    {
        get => _value;
        set
        {
            if (value != _value)
            {
                _value = value;
                FilterLine.Value = value;
                FilterLineChanged.InvokeAsync(FilterLine);
            }
        }
    }
    
    [Parameter]
    public EventCallback<FilterLine> OnRemoveFilter { get; set; }

    private async Task HandleRemoveFilter()
    {      
        if(FilterLine != null)
        {
            await OnRemoveFilter.InvokeAsync(FilterLine);
        }
    }
}
