@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Components.Forms
@using SpareParts.Client.Shared.Components
@using SpareParts.Client.Shared.Components.Filter;

<EditForm EditContext="_editContext">
    <FluentValidationValidator/>
    <FilterSelector Fields="Fields" FilterLine="FilterLine" OnRemoveFilter="HandleRemove" />
</EditForm>


@code {

    [Parameter, EditorRequired]
    public List<FilterField>? Fields { get; set; }


    [Parameter, EditorRequired]
    public FilterLine? FilterLine { get; set; }

    [Parameter]
    public EventCallback<FilterLine> OnRemoveFilter { get; set; }

    private TestModel TestModel { get; set; } = new TestModel();


    private EditContext? _editContext;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(TestModel);
    }

    private async Task HandleRemove()
    {
        await OnRemoveFilter.InvokeAsync();
    }
}
