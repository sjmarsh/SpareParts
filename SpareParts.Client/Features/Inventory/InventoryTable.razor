@using SpareParts.Shared.Models;

@inject IInventoryService InventoryService;
@inject IJSRuntime jsRuntime;

<h3>@HeaderText</h3>

@if (_isLoading)
{
    <div class="spinner-border"></div>
}
@if(_inventoryItems != null && _inventoryItems.Any())
{
    <button class="btn btn-primary" @onclick="OpenReport" ><span class="oi oi-print" title="Print" aria-hidden="true"/></button>

    <table class="table table-hover">
        <thead>
            <tr>
                <th>Part Name</th>
                <th>Quantity</th>
                <th>Date Recorded</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var item in _inventoryItems)
            {
                <tr>
                    <td>@item.PartName</td>
                    <td>@item.Quantity</td>
                    <td>@item.DateRecorded</td>
                </tr>
            }
        </tbody>
    </table>
    <Pager TotalItemCount="_totalItemCount" PageSize="PageSize" OnPageChanged="HandlePageChanged"/>
}
@if(_hasError)
{
    <div class="alert alert-danger py-1">
        @_errorMessage
    </div>
}


@code {

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public bool IsCurrentOnly { get; set; }

    private bool _isLoading;
    private bool _hasError;
    private string? _errorMessage;
    private List<InventoryItemDetail>? _inventoryItems;

    private int _currentPage;
    private int _totalItemCount;
    private const int PageSize = 10;

    protected async override Task OnInitializedAsync()
    {
        _isLoading = false;
        _hasError = false;
        _errorMessage = string.Empty;
        _currentPage = 1;

        await RefreshInventoryItemList();
    }

    private async Task RefreshInventoryItemList()
    {
        _isLoading = true;

        var skip = (_currentPage - 1) * PageSize;

        try
        {
            var response = await InventoryService.IndexDetail(IsCurrentOnly, skip, PageSize);

            if (response == null)
            {
                _hasError = true;
            }
            else
            {
                if (response.HasError)
                {
                    _hasError = true;
                    _errorMessage = response.Message;
                }

                _inventoryItems = response.Items?.OrderBy(i => i.PartName).ThenByDescending(i => i.DateRecorded).ToList();
                _totalItemCount = response.TotalItemCount;
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
            _hasError = true;
            _errorMessage = "Error occurred retrieving inventory.";
        }

        _isLoading = false;
    }

    private async Task HandlePageChanged(int page)
    {
        _currentPage = page;
        await RefreshInventoryItemList();
    }

    private async Task OpenReport()
    {
        var response = await InventoryService.Report(IsCurrentOnly);
        var reportData = await response.Content.ReadAsByteArrayAsync();

        IJSObjectReference module;        
        module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeAsync<string>("openBlob", reportData);
    }
}
