@page "/part-list"
@attribute [Authorize(Roles = Role.Administrator)]

@using SpareParts.Shared.Models

@inject IPartService PartService
@inject IServiceWrapper ServiceWrapper
@inject IJSRuntime jsRuntime

<h3>Part List</h3>

@if(_parts != null && _parts.Any())
{
    <div class="tool-container">
        <button class="btn btn-outline-dark tool-button" @onclick="OpenReport"><span class="oi oi-print tool-button-image" title="Report" aria-hidden="true"/><span>Report</span></button>
        <button class="btn btn-outline-dark tool-button" @onclick="AddPart"><span class="oi oi-plus tool-button-image" title="Add Part" aria-hidden="true"/><span>Add Part</span></button>
    </div>
    
    <table id="partTable" class="table table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Weight (kg)</th>
                <th>Price</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach(var part in _parts)
        {
            <tr>
                <td>@part.Name</td>
                <td>@part.Description</td>
                <td>@part.Weight.ToString("F2")</td>
                <td>@part.Price.ToString("C2")</td>
                <td>@part.StartDate.ToString("dd/MM/yyyy")</td>
                <td>@part.EndDate?.ToString("dd/MM/yyyy")</td>
                <td><button class="btn btn-link" @onclick="() => EditPart(part.ID)">Edit</button></td>
                <td><button class="btn btn-link" @onclick="() => DeletePart(part.ID)">Delete</button></td>
            </tr>
        }
        </tbody>
    </table>   
    <Pager TotalItemCount="_totalItemCount" PageSize="PageSize" OnPageChanged="HandlePageChanged"/>
}

@if(_hasError)
{
    <div class="alert alert-danger py-1">
        @_errorMessage
    </div>
}
@if (_hasDeleted)
{
    <div class="alert alert-success py-1">
        Success
    </div>
}

@if(_isDetailModalVisible)
{
    <Modal ShowModal="@_isDetailModalVisible" OnClose="OnCloseDetailModal">
        <PartDetail PartID="_selectedPartId" OnValidSubmit="RefreshPartsList" />
    </Modal>
}

@code {
    private bool _hasDeleted;
    private bool _hasError;
    private bool _isDetailModalVisible;
    private string? _errorMessage;
    private int? _selectedPartId;

    private List<Part>? _parts;

    private int _currentPage;
    private int _totalItemCount;
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        _isDetailModalVisible = false;
        _currentPage = 1;
        _hasDeleted = false;
        _hasError = false;
        _errorMessage = "";

        await RefreshPartsList();
    }

    private async Task RefreshPartsList()
    {        
        var skip = (_currentPage - 1) * PageSize;

        var partListResponse = await ServiceWrapper.ServiceCall(() => PartService.Index(false, skip, PageSize), "An error occurred retrieving part");
        if(partListResponse == null)
        {
            _hasError = true;
        }
        else
        {
            if (partListResponse.HasError)
            {
                _hasError = true;
                _errorMessage = partListResponse.Message;
            }

            _parts = partListResponse.Items;
            _totalItemCount = partListResponse.TotalItemCount;
        }
    }

    private async Task HandlePageChanged(int page)
    {
        _currentPage = page;
        await RefreshPartsList();
    }

    private void AddPart()
    {
        _selectedPartId = null;
        _isDetailModalVisible = true;
    }

    private void EditPart(int partID)
    {
        _selectedPartId = partID;
        _isDetailModalVisible = true;    
    }

    private async Task DeletePart(int partID)
    {
        _hasDeleted = false;
        _hasError = false;
        _errorMessage = "";

        var partResponse = await ServiceWrapper.ServiceCall(() => PartService.Delete(partID), "An error occurred deleting part.");

        if(partResponse != null && partResponse.HasError)
        {
            _hasError = true;
            _errorMessage = partResponse.Message;
        }
        else
        {
            _hasDeleted = true;
        }

        await RefreshPartsList();
    }

    private void OnCloseDetailModal()
    {
        _isDetailModalVisible = false;
    }

    private async Task OpenReport()
    {
        var response = await ServiceWrapper.ServiceCall(() => PartService.Report(), "An error occurred loading report.");

        if (response.IsSuccessStatusCode)
        {
            var reportData = await response.Content.ReadAsByteArrayAsync();
            IJSObjectReference module;        
            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
            await module.InvokeAsync<string>("openBlob", reportData);    
        }
    }
}
